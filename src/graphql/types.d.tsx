import gql from 'graphql-tag';
import * as ApolloReactCommon from '@apollo/react-common';
import * as ApolloReactHooks from '@apollo/react-hooks';
export type Maybe<T> = T | null;
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  /** An ISO 8601-encoded datetime */
  ISO8601DateTime: any;
  /** 正の整数 */
  PositiveNumber: any;
  /** Table id, hex Timestamp, ID */
  TTID: any;
};

/** アルバム */
export type Album = {
   __typename?: 'Album';
  /** Apple Music アルバム */
  appleMusicAlbum?: Maybe<AppleMusicAlbum>;
  /** 大型アートワーク */
  artworkL: Artwork;
  /** 中型アートワーク */
  artworkM: Artwork;
  /** 追加日 */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID */
  id: Scalars['TTID'];
  /** iTunes アルバム */
  itunesAlbum?: Maybe<AppleMusicAlbum>;
  /** タイトル */
  name: Scalars['String'];
  /** 発売日 */
  releaseDate: Scalars['ISO8601DateTime'];
  /** Spotify アルバム */
  spotifyAlbum?: Maybe<SpotifyAlbum>;
  /** トラック数 */
  totalTracks: Scalars['PositiveNumber'];
  /** トラック */
  tracks?: Maybe<Array<Track>>;
};

export type AlbumsConditions = {
  /** アーティストID */
  artists?: Maybe<IdInputObject>;
};

export enum AlbumsQueryOrder {
  /** 名前順 */
  Name = 'NAME',
  /** 新しい順 */
  New = 'NEW',
  /** 発売日順 */
  Release = 'RELEASE',
  /** 人気順 */
  Popularity = 'POPULARITY',
  /** トラック数順 */
  TotalTracks = 'TOTAL_TRACKS'
}

/** Apple Music アルバム */
export type AppleMusicAlbum = {
   __typename?: 'AppleMusicAlbum';
  /** Apple Music ID */
  appleMusicId: Scalars['String'];
  /** ID */
  id: Scalars['TTID'];
  /** タイトル */
  name: Scalars['String'];
};

/** Apple Music アーティスト */
export type AppleMusicArtist = {
   __typename?: 'AppleMusicArtist';
  /** Apple Music ID */
  appleMusicId: Scalars['String'];
  /** ID */
  id: Scalars['TTID'];
  /** 名前 */
  name: Scalars['String'];
};

/** アーティスト */
export type Artist = {
   __typename?: 'Artist';
  /** 関連アルバム */
  albums?: Maybe<Array<Album>>;
  /** Apple Music アーティスト */
  appleMusicArtists?: Maybe<Array<AppleMusicArtist>>;
  /** 大型アートワーク */
  artworkL: Artwork;
  /** 中型アートワーク */
  artworkM: Artwork;
  /** 追加日 */
  createdAt: Scalars['ISO8601DateTime'];
  /** ID */
  id: Scalars['TTID'];
  /** 名前 */
  name: Scalars['String'];
  /** 発売日 */
  releaseDate: Scalars['ISO8601DateTime'];
  /** Spotify アーティスト */
  spotifyArtists?: Maybe<Array<SpotifyArtist>>;
  /** 関連曲 */
  tracks?: Maybe<Array<Track>>;
};

export enum ArtistsQueryOrder {
  /** 新しい順 */
  New = 'NEW',
  /** 人気順 */
  Popularity = 'POPULARITY'
}

/** アートワーク */
export type Artwork = {
   __typename?: 'Artwork';
  /** 高さ */
  height?: Maybe<Scalars['PositiveNumber']>;
  /** URL */
  url?: Maybe<Scalars['String']>;
  /** 幅 */
  width?: Maybe<Scalars['PositiveNumber']>;
};


export type IdInputObject = {
  /** ID */
  id?: Maybe<Array<Scalars['TTID']>>;
};

export type Mutation = {
   __typename?: 'Mutation';
  signin?: Maybe<SigninPayload>;
  updateUser?: Maybe<UpdateUserPayload>;
};


export type MutationSigninArgs = {
  input: SigninInput;
};


export type MutationUpdateUserArgs = {
  input: UpdateUserInput;
};


export type Query = {
   __typename?: 'Query';
  /** アルバム情報取得 */
  album?: Maybe<Album>;
  /** アルバム一覧取得 */
  albums: Array<Album>;
  /** アーティスト取得 */
  artist?: Maybe<Artist>;
  /** アーティスト一覧取得 */
  artists: Array<Artist>;
};


export type QueryAlbumArgs = {
  id: Scalars['TTID'];
};


export type QueryAlbumsArgs = {
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['PositiveNumber']>;
  asc?: Maybe<Scalars['Boolean']>;
  conditions?: Maybe<AlbumsConditions>;
  order: AlbumsQueryOrder;
};


export type QueryArtistArgs = {
  id: Scalars['TTID'];
};


export type QueryArtistsArgs = {
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['PositiveNumber']>;
  asc?: Maybe<Scalars['Boolean']>;
  order?: Maybe<ArtistsQueryOrder>;
};

/** Autogenerated input type of Signin */
export type SigninInput = {
  username?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of Signin */
export type SigninPayload = {
   __typename?: 'SigninPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

/** Spotify アルバム */
export type SpotifyAlbum = {
   __typename?: 'SpotifyAlbum';
  /** ID */
  id: Scalars['TTID'];
  /** タイトル */
  name: Scalars['String'];
  /** Spotify ID */
  spotifyId: Scalars['String'];
};

/** Spotify アーティスト */
export type SpotifyArtist = {
   __typename?: 'SpotifyArtist';
  /** ID */
  id: Scalars['TTID'];
  /** 名前 */
  name: Scalars['String'];
  /** Spotify ID */
  spotifyId: Scalars['String'];
};


/** トラック */
export type Track = {
   __typename?: 'Track';
  /** ID */
  id: Scalars['TTID'];
  /** 国際標準レコーディングコード */
  isrc: Scalars['String'];
  /** タイトル */
  name: Scalars['String'];
};

/** Autogenerated input type of UpdateUser */
export type UpdateUserInput = {
  username?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
};

/** Autogenerated return type of UpdateUser */
export type UpdateUserPayload = {
   __typename?: 'UpdateUserPayload';
  /** A unique identifier for the client performing the mutation. */
  clientMutationId?: Maybe<Scalars['String']>;
  error?: Maybe<Scalars['String']>;
  user?: Maybe<User>;
};

/** ユーザー */
export type User = {
   __typename?: 'User';
  /** ID */
  id: Scalars['TTID'];
  /** 名前 */
  name: Scalars['String'];
  /** ユーザー名 */
  username: Scalars['String'];
};

export type AlbumQueryVariables = {
  id: Scalars['TTID'];
};


export type AlbumQuery = (
  { __typename?: 'Query' }
  & { album?: Maybe<(
    { __typename?: 'Album' }
    & Pick<Album, 'id' | 'totalTracks' | 'name' | 'releaseDate'>
    & { artworkL: (
      { __typename?: 'Artwork' }
      & Pick<Artwork, 'url' | 'width' | 'height'>
    ), artworkM: (
      { __typename?: 'Artwork' }
      & Pick<Artwork, 'url' | 'width' | 'height'>
    ), appleMusicAlbum?: Maybe<(
      { __typename?: 'AppleMusicAlbum' }
      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>
    )>, itunesAlbum?: Maybe<(
      { __typename?: 'AppleMusicAlbum' }
      & Pick<AppleMusicAlbum, 'id' | 'appleMusicId'>
    )>, spotifyAlbum?: Maybe<(
      { __typename?: 'SpotifyAlbum' }
      & Pick<SpotifyAlbum, 'id' | 'spotifyId'>
    )> }
  )> }
);

export type AlbumsQueryVariables = {
  conditions?: Maybe<AlbumsConditions>;
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['PositiveNumber']>;
  order: AlbumsQueryOrder;
  asc?: Maybe<Scalars['Boolean']>;
};


export type AlbumsQuery = (
  { __typename?: 'Query' }
  & { items: Array<(
    { __typename?: 'Album' }
    & Pick<Album, 'id'>
    & { artworkM: (
      { __typename?: 'Artwork' }
      & Pick<Artwork, 'url' | 'width' | 'height'>
    ), appleMusicAlbum?: Maybe<(
      { __typename?: 'AppleMusicAlbum' }
      & Pick<AppleMusicAlbum, 'id'>
    )>, itunesAlbum?: Maybe<(
      { __typename?: 'AppleMusicAlbum' }
      & Pick<AppleMusicAlbum, 'id'>
    )>, spotifyAlbum?: Maybe<(
      { __typename?: 'SpotifyAlbum' }
      & Pick<SpotifyAlbum, 'id'>
    )> }
  )> }
);

export type ArtistQueryVariables = {
  id: Scalars['TTID'];
};


export type ArtistQuery = (
  { __typename?: 'Query' }
  & { artist?: Maybe<(
    { __typename?: 'Artist' }
    & Pick<Artist, 'id' | 'name'>
    & { appleMusicArtists?: Maybe<Array<(
      { __typename?: 'AppleMusicArtist' }
      & Pick<AppleMusicArtist, 'id'>
    )>>, spotifyArtists?: Maybe<Array<(
      { __typename?: 'SpotifyArtist' }
      & Pick<SpotifyArtist, 'id'>
    )>>, artworkL: (
      { __typename?: 'Artwork' }
      & Pick<Artwork, 'url' | 'width' | 'height'>
    ) }
  )> }
);

export type ArtistsQueryVariables = {
  offset?: Maybe<Scalars['Int']>;
  limit?: Maybe<Scalars['PositiveNumber']>;
  order: ArtistsQueryOrder;
  asc?: Maybe<Scalars['Boolean']>;
};


export type ArtistsQuery = (
  { __typename?: 'Query' }
  & { items: Array<(
    { __typename?: 'Artist' }
    & Pick<Artist, 'id' | 'name'>
    & { artworkL: (
      { __typename?: 'Artwork' }
      & Pick<Artwork, 'url' | 'width' | 'height'>
    ), artworkM: (
      { __typename?: 'Artwork' }
      & Pick<Artwork, 'url' | 'width' | 'height'>
    ) }
  )> }
);

export type SigninMutationVariables = {
  username?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
};


export type SigninMutation = (
  { __typename?: 'Mutation' }
  & { signin?: Maybe<(
    { __typename?: 'SigninPayload' }
    & Pick<SigninPayload, 'error'>
    & { user?: Maybe<(
      { __typename?: 'User' }
      & Pick<User, 'id' | 'username' | 'name'>
    )> }
  )> }
);


export const AlbumDocument = gql`
    query Album($id: TTID!) {
  album(id: $id) {
    id
    totalTracks
    name
    releaseDate
    artworkL {
      url
      width
      height
    }
    artworkM {
      url
      width
      height
    }
    appleMusicAlbum {
      id
      appleMusicId
    }
    itunesAlbum {
      id
      appleMusicId
    }
    spotifyAlbum {
      id
      spotifyId
    }
  }
}
    `;

/**
 * __useAlbumQuery__
 *
 * To run a query within a React component, call `useAlbumQuery` and pass it any options that fit your needs.
 * When your component renders, `useAlbumQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAlbumQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useAlbumQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumQuery, AlbumQueryVariables>) {
        return ApolloReactHooks.useQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);
      }
export function useAlbumLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumQuery, AlbumQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AlbumQuery, AlbumQueryVariables>(AlbumDocument, baseOptions);
        }
export type AlbumQueryHookResult = ReturnType<typeof useAlbumQuery>;
export type AlbumLazyQueryHookResult = ReturnType<typeof useAlbumLazyQuery>;
export type AlbumQueryResult = ApolloReactCommon.QueryResult<AlbumQuery, AlbumQueryVariables>;
export const AlbumsDocument = gql`
    query Albums($conditions: AlbumsConditions, $offset: Int, $limit: PositiveNumber, $order: AlbumsQueryOrder!, $asc: Boolean) {
  items: albums(conditions: $conditions, offset: $offset, limit: $limit, order: $order, asc: $asc) {
    id
    artworkM {
      url
      width
      height
    }
    appleMusicAlbum {
      id
    }
    itunesAlbum {
      id
    }
    spotifyAlbum {
      id
    }
  }
}
    `;

/**
 * __useAlbumsQuery__
 *
 * To run a query within a React component, call `useAlbumsQuery` and pass it any options that fit your needs.
 * When your component renders, `useAlbumsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useAlbumsQuery({
 *   variables: {
 *      conditions: // value for 'conditions'
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      order: // value for 'order'
 *      asc: // value for 'asc'
 *   },
 * });
 */
export function useAlbumsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {
        return ApolloReactHooks.useQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);
      }
export function useAlbumsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<AlbumsQuery, AlbumsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<AlbumsQuery, AlbumsQueryVariables>(AlbumsDocument, baseOptions);
        }
export type AlbumsQueryHookResult = ReturnType<typeof useAlbumsQuery>;
export type AlbumsLazyQueryHookResult = ReturnType<typeof useAlbumsLazyQuery>;
export type AlbumsQueryResult = ApolloReactCommon.QueryResult<AlbumsQuery, AlbumsQueryVariables>;
export const ArtistDocument = gql`
    query Artist($id: TTID!) {
  artist(id: $id) {
    id
    name
    appleMusicArtists {
      id
    }
    spotifyArtists {
      id
    }
    artworkL {
      url
      width
      height
    }
  }
}
    `;

/**
 * __useArtistQuery__
 *
 * To run a query within a React component, call `useArtistQuery` and pass it any options that fit your needs.
 * When your component renders, `useArtistQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArtistQuery({
 *   variables: {
 *      id: // value for 'id'
 *   },
 * });
 */
export function useArtistQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistQuery, ArtistQueryVariables>) {
        return ApolloReactHooks.useQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);
      }
export function useArtistLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistQuery, ArtistQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ArtistQuery, ArtistQueryVariables>(ArtistDocument, baseOptions);
        }
export type ArtistQueryHookResult = ReturnType<typeof useArtistQuery>;
export type ArtistLazyQueryHookResult = ReturnType<typeof useArtistLazyQuery>;
export type ArtistQueryResult = ApolloReactCommon.QueryResult<ArtistQuery, ArtistQueryVariables>;
export const ArtistsDocument = gql`
    query Artists($offset: Int, $limit: PositiveNumber, $order: ArtistsQueryOrder!, $asc: Boolean) {
  items: artists(offset: $offset, limit: $limit, order: $order, asc: $asc) {
    id
    name
    artworkL {
      url
      width
      height
    }
    artworkM {
      url
      width
      height
    }
  }
}
    `;

/**
 * __useArtistsQuery__
 *
 * To run a query within a React component, call `useArtistsQuery` and pass it any options that fit your needs.
 * When your component renders, `useArtistsQuery` returns an object from Apollo Client that contains loading, error, and data properties
 * you can use to render your UI.
 *
 * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;
 *
 * @example
 * const { data, loading, error } = useArtistsQuery({
 *   variables: {
 *      offset: // value for 'offset'
 *      limit: // value for 'limit'
 *      order: // value for 'order'
 *      asc: // value for 'asc'
 *   },
 * });
 */
export function useArtistsQuery(baseOptions?: ApolloReactHooks.QueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {
        return ApolloReactHooks.useQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);
      }
export function useArtistsLazyQuery(baseOptions?: ApolloReactHooks.LazyQueryHookOptions<ArtistsQuery, ArtistsQueryVariables>) {
          return ApolloReactHooks.useLazyQuery<ArtistsQuery, ArtistsQueryVariables>(ArtistsDocument, baseOptions);
        }
export type ArtistsQueryHookResult = ReturnType<typeof useArtistsQuery>;
export type ArtistsLazyQueryHookResult = ReturnType<typeof useArtistsLazyQuery>;
export type ArtistsQueryResult = ApolloReactCommon.QueryResult<ArtistsQuery, ArtistsQueryVariables>;
export const SigninDocument = gql`
    mutation Signin($username: String, $password: String) {
  signin(input: {username: $username, password: $password}) {
    user {
      id
      username
      name
    }
    error
  }
}
    `;
export type SigninMutationFn = ApolloReactCommon.MutationFunction<SigninMutation, SigninMutationVariables>;

/**
 * __useSigninMutation__
 *
 * To run a mutation, you first call `useSigninMutation` within a React component and pass it any options that fit your needs.
 * When your component renders, `useSigninMutation` returns a tuple that includes:
 * - A mutate function that you can call at any time to execute the mutation
 * - An object with fields that represent the current status of the mutation's execution
 *
 * @param baseOptions options that will be passed into the mutation, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options-2;
 *
 * @example
 * const [signinMutation, { data, loading, error }] = useSigninMutation({
 *   variables: {
 *      username: // value for 'username'
 *      password: // value for 'password'
 *   },
 * });
 */
export function useSigninMutation(baseOptions?: ApolloReactHooks.MutationHookOptions<SigninMutation, SigninMutationVariables>) {
        return ApolloReactHooks.useMutation<SigninMutation, SigninMutationVariables>(SigninDocument, baseOptions);
      }
export type SigninMutationHookResult = ReturnType<typeof useSigninMutation>;
export type SigninMutationResult = ApolloReactCommon.MutationResult<SigninMutation>;
export type SigninMutationOptions = ApolloReactCommon.BaseMutationOptions<SigninMutation, SigninMutationVariables>;